// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String             @id @default(cuid())
  name                    String             @default("")
  email                   String             @unique @default("")
  password                String
  shops                   Shop[]             @relation("Shop_user")
  channels                Channel[]          @relation("Channel_user")
  orders                  Order[]            @relation("Order_user")
  lineItems               LineItem[]         @relation("LineItem_user")
  cartItems               CartItem[]         @relation("CartItem_user")
  shopItems               ShopItem[]         @relation("ShopItem_user")
  channelItems            ChannelItem[]      @relation("ChannelItem_user")
  apiKeys                 apiKey[]           @relation("apiKey_user")
  matches                 Match[]            @relation("Match_user")
  links                   Link[]             @relation("Link_user")
  channelMetafields       ChannelMetafield[] @relation("ChannelMetafield_user")
  shopMetafields          ShopMetafield[]    @relation("ShopMetafield_user")
  trackingDetails         TrackingDetail[]   @relation("TrackingDetail_user")
  role                    Role?              @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?            @map("role")
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @default(now()) @updatedAt
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model apiKey {
  id        String   @id @default(cuid())
  user      User?    @relation("apiKey_user", fields: [userId], references: [id])
  userId    String?  @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([userId])
}

model Role {
  id                  String  @id @default(cuid())
  name                String  @default("")
  canSeeOtherUsers    Boolean @default(false)
  canManageUsers      Boolean @default(false)
  canManageRoles      Boolean @default(false)
  canSeeOtherOrders   Boolean @default(false)
  canManageOrders     Boolean @default(false)
  canSeeOtherShops    Boolean @default(false)
  canManageShops      Boolean @default(false)
  canSeeOtherChannels Boolean @default(false)
  canManageChannels   Boolean @default(false)
  canSeeOtherMatches  Boolean @default(false)
  canManageMatches    Boolean @default(false)
  canSeeOtherLinks    Boolean @default(false)
  canManageLinks      Boolean @default(false)
  assignedTo          User[]  @relation("User_role")
}

model Order {
  id             String     @id @default(cuid())
  orderId        Float?
  orderName      String     @default("")
  email          String     @default("")
  first_name     String     @default("")
  last_name      String     @default("")
  streetAddress1 String     @default("")
  streetAddress2 String     @default("")
  city           String     @default("")
  state          String     @default("")
  zip            String     @default("")
  currency       String     @default("")
  totalPrice     String     @default("")
  subTotalPrice  String     @default("")
  totalDiscount  String     @default("")
  totalTax       String     @default("")
  phoneNumber    String     @default("")
  note           String     @default("")
  shippingMethod Json?
  country        String     @default("")
  orderError     String     @default("")
  status         String     @default("")
  locationId     Float?
  user           User?      @relation("Order_user", fields: [userId], references: [id])
  userId         String?    @map("user")
  shop           Shop?      @relation("Order_shop", fields: [shopId], references: [id])
  shopId         String?    @map("shop")
  lineItems      LineItem[] @relation("LineItem_order")
  cartItems      CartItem[] @relation("CartItem_order")
  linkOrder      Boolean    @default(false)
  matchOrder     Boolean    @default(false)
  processOrder   Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt

  @@index([userId])
  @@index([shopId])
}

model TrackingDetail {
  id              String     @id @default(cuid())
  trackingCompany String     @default("")
  trackingNumber  String     @default("")
  purchaseId      String     @default("")
  cartItems       CartItem[] @relation("CartItem_trackingDetails")
  user            User?      @relation("TrackingDetail_user", fields: [userId], references: [id])
  userId          String?    @map("user")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt

  @@index([userId])
}

model LineItem {
  id         String   @id @default(cuid())
  name       String   @default("")
  image      String   @default("")
  price      String   @default("")
  quantity   Int?
  productId  String   @default("")
  variantId  String   @default("")
  sku        String   @default("")
  lineItemId String   @default("")
  order      Order?   @relation("LineItem_order", fields: [orderId], references: [id])
  orderId    String?  @map("order")
  user       User?    @relation("LineItem_user", fields: [userId], references: [id])
  userId     String?  @map("user")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([orderId])
  @@index([userId])
}

model CartItem {
  id              String           @id @default(cuid())
  name            String           @default("")
  image           String           @default("")
  price           String           @default("")
  quantity        Int?
  productId       String           @default("")
  variantId       String           @default("")
  lineItemId      String           @default("")
  sku             String           @default("")
  url             String           @default("")
  error           String           @default("")
  purchaseId      String           @default("")
  status          String           @default("")
  order           Order?           @relation("CartItem_order", fields: [orderId], references: [id])
  orderId         String?          @map("order")
  trackingDetails TrackingDetail[] @relation("CartItem_trackingDetails")
  user            User?            @relation("CartItem_user", fields: [userId], references: [id])
  userId          String?          @map("user")
  channel         Channel?         @relation("CartItem_channel", fields: [channelId], references: [id])
  channelId       String?          @map("channel")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt

  @@index([orderId])
  @@index([userId])
  @@index([channelId])
}

model Channel {
  id                     String             @id @default(cuid())
  name                   String             @default("")
  type                   String             @default("")
  domain                 String             @default("")
  accessToken            String             @default("")
  searchProductsEndpoint String             @default("")
  createPurchaseEndpoint String             @default("")
  getWebhooksEndpoint    String             @default("")
  createWebhookEndpoint  String             @default("")
  deleteWebhookEndpoint  String             @default("")
  channelItems           ChannelItem[]      @relation("ChannelItem_channel")
  cartItems              CartItem[]         @relation("CartItem_channel")
  links                  Link[]             @relation("Link_channel")
  metafields             ChannelMetafield[] @relation("ChannelMetafield_channel")
  user                   User?              @relation("Channel_user", fields: [userId], references: [id])
  userId                 String?            @map("user")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @default(now()) @updatedAt

  @@index([userId])
}

model ChannelMetafield {
  id        String   @id @default(cuid())
  key       String   @default("")
  value     String   @default("")
  channel   Channel? @relation("ChannelMetafield_channel", fields: [channelId], references: [id])
  channelId String?  @map("channel")
  user      User?    @relation("ChannelMetafield_user", fields: [userId], references: [id])
  userId    String?  @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([channelId])
  @@index([userId])
}

model ChannelItem {
  id         String   @id @default(cuid())
  quantity   Int?
  productId  String   @default("")
  variantId  String   @default("")
  lineItemId String   @default("")
  price      String   @default("")
  matches    Match[]  @relation("ChannelItem_matches")
  channel    Channel? @relation("ChannelItem_channel", fields: [channelId], references: [id])
  channelId  String?  @map("channel")
  user       User?    @relation("ChannelItem_user", fields: [userId], references: [id])
  userId     String?  @map("user")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([channelId])
  @@index([userId])
}

model Shop {
  id                     String          @id @default(cuid())
  name                   String          @default("")
  type                   String          @default("")
  domain                 String          @unique @default("")
  accessToken            String          @default("")
  searchProductsEndpoint String          @default("")
  searchOrdersEndpoint   String          @default("")
  updateProductEndpoint  String          @default("")
  getWebhooksEndpoint    String          @default("")
  createWebhookEndpoint  String          @default("")
  deleteWebhookEndpoint  String          @default("")
  orders                 Order[]         @relation("Order_shop")
  shopItems              ShopItem[]      @relation("ShopItem_shop")
  links                  Link[]          @relation("Link_shop")
  metafields             ShopMetafield[] @relation("ShopMetafield_shop")
  user                   User?           @relation("Shop_user", fields: [userId], references: [id])
  userId                 String?         @map("user")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @default(now()) @updatedAt

  @@index([userId])
}

model ShopMetafield {
  id        String   @id @default(cuid())
  key       String   @default("")
  value     String   @default("")
  shop      Shop?    @relation("ShopMetafield_shop", fields: [shopId], references: [id])
  shopId    String?  @map("shop")
  user      User?    @relation("ShopMetafield_user", fields: [userId], references: [id])
  userId    String?  @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([shopId])
  @@index([userId])
}

model ShopItem {
  id         String   @id @default(cuid())
  quantity   Int?
  productId  String   @default("")
  variantId  String   @default("")
  lineItemId String   @default("")
  matches    Match[]  @relation("Match_input")
  shop       Shop?    @relation("ShopItem_shop", fields: [shopId], references: [id])
  shopId     String?  @map("shop")
  user       User?    @relation("ShopItem_user", fields: [userId], references: [id])
  userId     String?  @map("user")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@index([shopId])
  @@index([userId])
}

model Match {
  id        String        @id @default(cuid())
  input     ShopItem[]    @relation("Match_input")
  output    ChannelItem[] @relation("ChannelItem_matches")
  user      User?         @relation("Match_user", fields: [userId], references: [id])
  userId    String?       @map("user")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt

  @@index([userId])
}

model Link {
  id        String   @id @default(cuid())
  shop      Shop?    @relation("Link_shop", fields: [shopId], references: [id])
  shopId    String?  @map("shop")
  channel   Channel? @relation("Link_channel", fields: [channelId], references: [id])
  channelId String?  @map("channel")
  filter    Json?
  user      User?    @relation("Link_user", fields: [userId], references: [id])
  userId    String?  @map("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([shopId])
  @@index([channelId])
  @@index([userId])
}
